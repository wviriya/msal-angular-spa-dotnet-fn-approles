name: CI/CD for Angular on Azure Storage and CDN.
on: 
  workflow_dispatch:
    inputs:
      ENVIRONMENT_TYPE: 
        description: 'Environment: dev, test, or prod'
        required: true
        default: 'test'
      APP_NAME_PREFIX: 
        description: 'Prefix to be used in naming Azure resources'
        required: true
        default: 'wvmsal'
      RESOURCE_GROUP_NAME: 
        description: 'Resource Group where Azure resources are located'
        required: true
        default: 'wvmsal-test-rg'
      CLIENT_URL: 
        description: 'Client URL'
        required: true
        default: 'https://wvmsaltest.z8.web.core.windows.net'
      API_URL: 
        description: 'API on APIM URL'
        required: true
        default: 'https://fn-wvmsal-test.azurewebsites.net/api/todos'
      AZURE_STORAGE_NAME: 
        description: 'Azure storage account name'
        required: true
        default: 'wvmsaltest'                     
  
# CONFIGURATION
# For help, go to https://github.com/Azure/Actions
#
# 1. Set up the following secrets in your repository:
#   AZURE_CREDENTIALS
#
# 2. Change below variables for your configuration:
env:
  ENVIRONMENT_TYPE: ${{ github.event.inputs.ENVIRONMENT_TYPE }}
  APP_NAME_PREFIX: ${{ github.event.inputs.APP_NAME_PREFIX }}
  RESOURCE_GROUP_NAME: ${{ github.event.inputs.RESOURCE_GROUP_NAME }}
  CLIENT_URL: ${{ github.event.inputs.CLIENT_URL }}
  API_URL: ${{ github.event.inputs.API_URL }}
  AZURE_STORAGE_NAME: ${{ github.event.inputs.AZURE_STORAGE_NAME }}
  CDN_PROFILE_NAME: ${{ github.event.inputs.CDN_PROFILE_NAME }}
  CDN_ENDPOINT_NAME: ${{ github.event.inputs.CDN_ENDPOINT_NAME }}
  APP_SOURCE_PATH: 'src'
  ANGULAR_PATH: 'client/angular/ToDoSpaMSAL2'
  NODE_VERSION: '14'
  BICEP_FILE_PATH: 'deploy'
  AUTH_CONFIG_FILE_NAME: 'auth-config.ts' # 'app-config.json'

jobs:
  angular_cicd:
    runs-on: ubuntu-latest
    steps:
    # Authentication
    # Set up the following secrets in your repository: AZURE_CREDENTIALS
    # For details on usage of secrets, please refer https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS  }}
    
    # Checkout
    - name: Checkout
      uses: actions/checkout@v1

    # Run PowerShell script analyzer
    - name: Run PSScriptAnalyzer
      uses: microsoft/psscriptanalyzer-action@2044ae068e37d0161fa2127de04c19633882f061
      with:
        # Check https://github.com/microsoft/action-psscriptanalyzer for more info about the options.
        # The below set up runs PSScriptAnalyzer to your entire repository and runs some basic security rules.
        path: .\${{ env.BICEP_FILE_PATH }}\scripts
        recurse: true 
        # Include your own basic security rules. Removing this option will run all the rules 
        includeRule: '"PSAvoidGlobalAliases", "PSAvoidUsingConvertToSecureStringWithPlainText"'
        output: results.sarif
      
    # Upload the SARIF file generated in the previous step
    - name: Upload SARIF results file
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: results.sarif

    # Run app registration against AAD using PowerShell script
    - name: 'App Registration'
      id: appRegistration
      continue-on-error: true
      shell: pwsh
      run: |
        cd .\${{ env.BICEP_FILE_PATH }}\scripts
        .\appRegistrationAndPermission.ps1 `
        -clientName ${{ env.APP_NAME_PREFIX }}${{ env.ENVIRONMENT_TYPE }} `
        -apiName fn-${{ env.APP_NAME_PREFIX }}-${{ env.ENVIRONMENT_TYPE }} `
        -resourceGroup ${{ env.APP_NAME_PREFIX }}-${{ env.ENVIRONMENT_TYPE }}-rg `
        -staticWebURL ${{ env.CLIENT_URL }}

    # Set app configurations of Angular
    - name: 'Replace tokens'
      uses: cschleiden/replace-tokens@v1.0
      with:
        tokenPrefix: '__'
        tokenSuffix: '__'
        files: ${{ github.workspace }}/${{ env.APP_SOURCE_PATH }}/${{ env.ANGULAR_PATH }}/src/app/${{ env.AUTH_CONFIG_FILE_NAME }}
      env: 
        clientAppId: ${{ steps.appRegistration.outputs.clientId }}
        clientAppURL: ${{ env.CLIENT_URL }}
        apimURL: ${{ env.API_URL }}
        backendAPIScope: ${{ steps.appRegistration.outputs.scope }}
        tenantDomainName: ${{ steps.appRegistration.outputs.tenantDomainName }}
    
    # Setup Node.js environment
    - name: Setup Node.js ${{ env.NODE_VERSION }} environment
      uses: actions/setup-node@v2
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    # Initialize the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: javascript # go, javascript, csharp, python, cpp, java

    # Build Angular application
    - name: Build Angular application
      run: |
        pushd ./${{ env.APP_SOURCE_PATH }}/${{ env.ANGULAR_PATH }}
        npm install
        npm install -g @angular/cli
        ng build -c=production --output-path=./dist
        popd

    # Running CodeQL scan
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
    
    # Deploy Angular application to Storage Account
    - name: Publish static website to Azure storage account ${{ env.AZURE_STORAGE_NAME }}
      uses: Azure/cli@1.0.4
      with:
        # Azure CLI version to be used to execute the script. If not provided, latest version is used
        azcliversion: 2.21.0
        # Specify the script here
        inlineScript: az storage blob upload-batch -s ./${{ env.APP_SOURCE_PATH }}/${{ env.ANGULAR_PATH }}/dist -d '$web' --account-name ${{ env.AZURE_STORAGE_NAME }}

    # Azure logout
    - name: logout
      run: |
            az logout
      if: always()
